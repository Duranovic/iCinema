// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iCinema.Infrastructure.Persistence;

#nullable disable

namespace iCinema.Infrastructure.Migrations
{
    [DbContext(typeof(iCinemaDbContext))]
    [Migration("20250718210502_SeedInitialData")]
    partial class SeedInitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id")
                        .HasName("PK__Actors__3214EC07D0925FC7");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Cinema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id")
                        .HasName("PK__Cinemas__3214EC0751440523");

                    b.HasIndex("CityId");

                    b.ToTable("Cinemas");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Cities__3214EC07EC7B6656");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3c3c3c3-c3c3-4c3c-c3c3-c3c3c3c3c3c3"),
                            CountryId = new Guid("a1a1a1a1-a1a1-4a1a-a1a1-a1a1a1a1a1a1"),
                            Name = "Mostar"
                        });
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Countrie__3214EC076E0EF6F5");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1a1a1a1-a1a1-4a1a-a1a1-a1a1a1a1a1a1"),
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = new Guid("b2b2b2b2-b2b2-4b2b-b2b2-b2b2b2b2b2b2"),
                            Name = "Croatia"
                        });
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id")
                        .HasName("PK__Director__3214EC07791F353C");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Genres__3214EC072358E139");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4d4d4d4-d4d4-4d4d-d4d4-d4d4d4d4d4d4"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("e5e5e5e5-e5e5-4e5e-e5e5-e5e5e5e5e5e5"),
                            Name = "Comedy"
                        });
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Hall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CinemaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HallType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsDolbyAtmos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RowsCount")
                        .HasColumnType("int");

                    b.Property<string>("ScreenSize")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SeatsPerRow")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Halls__3214EC075CC4C2E3");

                    b.HasIndex("CinemaId");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AgeRating")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DirectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DurationMin")
                        .HasColumnType("int");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PosterUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TrailerUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id")
                        .HasName("PK__Movies__3214EC076ACA7E1B");

                    b.HasIndex("DirectorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.MovieActor", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MovieId", "ActorId")
                        .HasName("PK__MovieAct__EEA9AABE1B15CA55");

                    b.HasIndex("ActorId");

                    b.ToTable("MovieActors");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Projection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("HallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsSubtitled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("ProjectionType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Projecti__3214EC075E9258FC");

                    b.HasIndex("HallId");

                    b.HasIndex("MovieId");

                    b.ToTable("Projections");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.PromoCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AppliesToMovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CurrentUses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int?>("MaxUses")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__PromoCod__3214EC0752A2B088");

                    b.HasIndex("AppliesToMovieId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("RatingValue")
                        .HasColumnType("tinyint");

                    b.Property<string>("Review")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__Ratings__3214EC073B0666A1");

                    b.HasIndex("MovieId");

                    b.HasIndex(new[] { "UserId", "MovieId" }, "UQ_Ratings_User_Movie")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Recommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__Recommen__3214EC07BF832837");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsCanceled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ProjectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReservedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__Reservat__3214EC07C1769BEB");

                    b.HasIndex("ProjectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Roles__3214EC07D6919DE3");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "Client"
                        });
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("HallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Seats__3214EC0730A70400");

                    b.HasIndex("HallId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("QRCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TicketStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TicketType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id")
                        .HasName("PK__Tickets__3214EC07598414D2");

                    b.HasIndex("ReservationId");

                    b.HasIndex("SeatId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC07DD3DC061");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Cinema", b =>
                {
                    b.HasOne("iCinema.Infrastructure.Persistence.Models.City", "City")
                        .WithMany("Cinemas")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Cinemas_Cities");

                    b.Navigation("City");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.City", b =>
                {
                    b.HasOne("iCinema.Infrastructure.Persistence.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_Cities_Countries");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Hall", b =>
                {
                    b.HasOne("iCinema.Infrastructure.Persistence.Models.Cinema", "Cinema")
                        .WithMany("Halls")
                        .HasForeignKey("CinemaId")
                        .IsRequired()
                        .HasConstraintName("FK_Halls_Cinemas");

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Movie", b =>
                {
                    b.HasOne("iCinema.Infrastructure.Persistence.Models.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .HasConstraintName("FK_Movies_Director");

                    b.HasOne("iCinema.Infrastructure.Persistence.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_Movies_Genres");

                    b.Navigation("Director");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.MovieActor", b =>
                {
                    b.HasOne("iCinema.Infrastructure.Persistence.Models.Actor", "Actor")
                        .WithMany("MovieActors")
                        .HasForeignKey("ActorId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieActors_Actor");

                    b.HasOne("iCinema.Infrastructure.Persistence.Models.Movie", "Movie")
                        .WithMany("MovieActors")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieActors_Movie");

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Projection", b =>
                {
                    b.HasOne("iCinema.Infrastructure.Persistence.Models.Hall", "Hall")
                        .WithMany("Projections")
                        .HasForeignKey("HallId")
                        .IsRequired()
                        .HasConstraintName("FK_Projections_Halls");

                    b.HasOne("iCinema.Infrastructure.Persistence.Models.Movie", "Movie")
                        .WithMany("Projections")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_Projections_Movies");

                    b.Navigation("Hall");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.PromoCode", b =>
                {
                    b.HasOne("iCinema.Infrastructure.Persistence.Models.Movie", "AppliesToMovie")
                        .WithMany("PromoCodes")
                        .HasForeignKey("AppliesToMovieId")
                        .HasConstraintName("FK_PromoCodes_Movies");

                    b.HasOne("iCinema.Infrastructure.Persistence.Models.User", "CreatedByNavigation")
                        .WithMany("PromoCodes")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_PromoCodes_Admin");

                    b.Navigation("AppliesToMovie");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Rating", b =>
                {
                    b.HasOne("iCinema.Infrastructure.Persistence.Models.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_Ratings_Movies");

                    b.HasOne("iCinema.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Ratings_Users");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Recommendation", b =>
                {
                    b.HasOne("iCinema.Infrastructure.Persistence.Models.Movie", "Movie")
                        .WithMany("Recommendations")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_Recommendations_Movies");

                    b.HasOne("iCinema.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("Recommendations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Recommendations_Users");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Reservation", b =>
                {
                    b.HasOne("iCinema.Infrastructure.Persistence.Models.Projection", "Projection")
                        .WithMany("Reservations")
                        .HasForeignKey("ProjectionId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservations_Projections");

                    b.HasOne("iCinema.Infrastructure.Persistence.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Reservations_Users");

                    b.Navigation("Projection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Seat", b =>
                {
                    b.HasOne("iCinema.Infrastructure.Persistence.Models.Hall", "Hall")
                        .WithMany("Seats")
                        .HasForeignKey("HallId")
                        .IsRequired()
                        .HasConstraintName("FK_Seats_Halls");

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Ticket", b =>
                {
                    b.HasOne("iCinema.Infrastructure.Persistence.Models.Reservation", "Reservation")
                        .WithMany("Tickets")
                        .HasForeignKey("ReservationId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_Reservations");

                    b.HasOne("iCinema.Infrastructure.Persistence.Models.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("SeatId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_Seats");

                    b.Navigation("Reservation");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.User", b =>
                {
                    b.HasOne("iCinema.Infrastructure.Persistence.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Actor", b =>
                {
                    b.Navigation("MovieActors");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Cinema", b =>
                {
                    b.Navigation("Halls");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.City", b =>
                {
                    b.Navigation("Cinemas");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Hall", b =>
                {
                    b.Navigation("Projections");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Movie", b =>
                {
                    b.Navigation("MovieActors");

                    b.Navigation("Projections");

                    b.Navigation("PromoCodes");

                    b.Navigation("Ratings");

                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Projection", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Reservation", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.Seat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("iCinema.Infrastructure.Persistence.Models.User", b =>
                {
                    b.Navigation("PromoCodes");

                    b.Navigation("Ratings");

                    b.Navigation("Recommendations");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
